#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
from pymongo import MongoClient
from pymongo.collection import Collection
from threading import Thread
import os
import time
import pickle

log = logging.getLogger(__name__)

"""This module looks for new entries generated by worker and uploads them to the
database."""

class Uploader:
    worker: Thread
    
    def __init__(self, uri: str, database: str, collection: str, directory: str):
        
        log.info("Connecting to database...")
        self.shard = MongoClient(uri)
        
        self.database = self.shard.get_database(database)
        
        log.info("Creating collection...")
        self.collection: Collection = self.database[collection]
        
        log.info(f"Database:collection {database}:{collection} connected")
        
        # check if measurements directory exists, if not create it
        if not os.path.isdir(directory):
            try:
                os.mkdir(directory)
            except:
                raise AttributeError(f"Directory {directory} does not exist.")
        
        self._directory = directory
    
    def start(self) -> Thread:
        """Start new thread which periodically checks for new entries and
        uploads them to the database.
        
        returns: Thread object of the thread.
        """
        
        self._run = True
        self.worker = Thread(target=self._upload)
        self.worker.start()
        return self.worker
        
        
    def stop(self) -> None:
        """Stop the thread."""
        self._run = False
        
        log.info("Waiting for uploader thread to finish...")
        # wait for thread to finish
        self.worker.join()
        
    def alive(self) -> bool:
        return self.worker.is_alive()
        
    def _upload(self) -> None:
        """Upload new entries to the database."""
        
        while self._run:
            for entry in os.listdir(self._directory):
                if entry.endswith(".dat"):
                    # unpickle data
                    filename = os.path.join(self._directory, entry)
                    time.sleep(.1)
                    with open(filename, "rb") as f:
                        try:
                            data = pickle.load(f)
                        except EOFError:
                            log.warning(f"Uploader encountered empty file {filename}")
                            continue
                    
                    try:
                        result = self.collection.insert_one(data)
                        os.remove(filename)
                        log.info(f"Uploaded {entry} to database. Result: {result.inserted_id}")
                        
                    except Exception as e:
                        # probably a timeout, try again in 10s
                        log.warning(f"Unable to upload {entry} to database: {e}")
                        time.sleep(10)
            
            # sleep for 100ms to avoid busy waiting
            time.sleep(.1)

        log.warning("Uploader thread stopped.")