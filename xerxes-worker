#!/usr/bin/env python3
# -*- coding: utf-8 -*-


from rich import print
import os
import time
import socket
import logging
import sys
import serial
from pymongo import MongoClient
from pymongo.collection import Collection
from xerxes_protocol.network import XerxesNetwork, Addr
from xerxes_protocol.hierarchy.root import XerxesRoot
from xerxes_protocol.hierarchy.leaves.utils import leaf_generator
from xerxes_protocol.hierarchy.leaves.leaf import Leaf, LeafData
import xerxes_node.config as config
from xerxes_node.system import Duplex, XerxesSystem
from xerxes_node.utils import get_cpu_temp_celsius


file_path = os.path.realpath(__file__)
script_dir = os.path.dirname(file_path)

import os, time


HOSTNAME = socket.gethostname()

def home_dir(path):
    return os.path.join(os.path.expanduser("~"), path)


def timestamp(data: dict) -> dict:
    data.update({    
        "time":{
            "epoch": time.time(),
            "gm_time": time.asctime(time.gmtime()),
        }   
    })


def run(collection: Collection, system: XerxesSystem, sample_period: float, log_period: float):

    current_period = log_period
    last_cycle = time.perf_counter()
    run_count = 1

    while True:
        while not system.wait(1):
            log.info("Xerxes system is busy...")
        system.poll()

        cycletime = time.perf_counter() - last_cycle
        try:
            time.sleep(sample_period-cycletime)
            log.debug(f"Cycletime: {cycletime}, sleeping for {sample_period-cycletime}.")
        except ValueError:
            log.warning(f"Cycle time {cycletime} is longer than sample period {sample_period}")

        if sample_period > cycletime:
            current_period += sample_period
        else:
            current_period += cycletime
        last_cycle = time.perf_counter()
        
        if current_period >= log_period:
            current_period = 0
            
            data = {
                "measurements": {}
            }
            
            m = system.get_measurements()
            for leaf in m.keys():
                ma = Leaf.average(m.get(leaf))
                md = ma._as_dict()
                
                data["measurements"].update({
                    str(int(leaf.address)): md
                })
            timestamp(data)
            data.update({
                "errors": system.get_errors()
            })

            new_id = collection.insert_one(data)
            log.info(f"New log pushed: {new_id.inserted_id}")
            log.debug(f"Data: {data}")
                
            # every once in a while, rescan the network
            if run_count % 100 == 0:
                discover_result = system.discover()

                data = {
                    "discovery": discover_result,
                    "system_info": {
                        "cpu_temp": get_cpu_temp_celsius()
                    }  
                }
                timestamp(data)
                new_id = collection.insert_one(data)
                log.info(f"New log pushed: {new_id.inserted_id}")
                log.debug(f"Data: {data}")

            run_count += 1


if __name__ == "__main__":
    
    print("creating logger")
    log_filename = "/tmp/xerxes.log"
    
    log = logging.getLogger()
    logging.basicConfig(
        format="%(levelname)s: %(message)s",  # '%(asctime)s: %(name)s: %(levelname)s - %(message)s', 
        # datefmt='%m/%d/%Y %I:%M:%S %p',
        # filename=log_filename, 
        level=logging._nameToLevel[config.logging_level]
    )
    

    log.info(f"Logger started, log file: {log_filename}")
    log.warning("Starting network.")
    
    XN = XerxesNetwork(serial.Serial(
        port=config.use_device
    )).init(
        baudrate=115200,
        timeout=config.port_timeout
    )
    log.info(XN)
    log.info("Creating root (master)")
    XR = XerxesRoot(Addr(0xfe), XN)
    log.warning("Master created")
    log.info(str(XR))

    log.warning("Creating node system")
    XS = XerxesSystem(
        mode=Duplex.HALF,
        root=XR,
        std_timeout_s=config.network_timeout,
    )
    log.info("System created.")
    log.warning("Discovering leaves on network...")
    log.info(XS.discover())
    log.warning([i.address for i in XS._leaves])
    
    log.info("Connecting to database...")
    shard = MongoClient(config.mongo_URI)
    database = shard.get_database(config.use_database)
    log.info("Creating collection...")
    collection = database[HOSTNAME]
    log.info(f"Database {database.name} connected")

    log.info(f"Using collection: {database.name}.{HOSTNAME}")
    log.info(f"Current working dir: {os.getcwd()}")

    run(
        collection=collection,
        system=XS,
        sample_period=config.sample_period, 
        log_period=config.update_period
    )

