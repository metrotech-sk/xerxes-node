#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import xerxes.settings as settings
from pprint import pprint as print
import os
import time
import socket
import logging
from pymongo import MongoClient
from statistics import stdev
from systemd import journal

file_path = os.path.realpath(__file__)
script_dir = os.path.dirname(file_path)


import cppyy, os, time
cppyy.add_include_path(os.path.join(script_dir, "cpp/include"))
[cppyy.include(i) for i in os.listdir(os.path.join(script_dir, "cpp/include"))]
cppyy.add_library_path(os.path.join(script_dir, "build"))
cppyy.load_library("libxerxes")
from cppyy.gbl import Xerxes as X


HOSTNAME = socket.gethostname()

def home_dir(path):
    return os.path.join(os.path.expanduser("~"), path)


def discover(comm, leaves, addr_range=32):
    found_addresses = []

    log.info("scanning...")

    for i in range(3):
        for addr in range(1, 32):
            if addr in found_addresses:
                continue

            try:
                tmp_leaf = X.PLeaf(addr, comm, 0.020)
                tmp_leaf.read()
                if addr not in found_addresses:
                    found_addresses.append(addr)
                    leaves.append(tmp_leaf)
                    log.info(f"leaf: {addr} found!")
            except cppyy.gbl.std.runtime_error:
                pass
    return found_addresses


def run(db, sample_period=1, log_period=60):
    col_test = db.beta[HOSTNAME]
    # inserted_id = col_test.insert_one(post).inserted_id

    current_period = log_period
    last_cycle = time.time()

    while True:
        if os.access("/sys/class/thermal/thermal_zone0/temp", os.R_OK):
            with open ("/sys/class/thermal/thermal_zone0/temp", "r") as tf:
                cpu_temp = int(tf.read())
        else:
            cpu_temp = -1

        sensor_data = {}
        for leaf in leaves:
            try:
                vals = leaf.read()
                sensor_data[str(leaf.getAddr())] = {
                    "pressure": vals.pressure.getmmH2O(),
                    "temp_sensor": vals.temp_sens.getCelsius(),
                    "external_temp1": vals.temp_ext1.getCelsius(),
                    "external_temp2": vals.temp_ext2.getCelsius()
                }
            except cppyy.gbl.std.runtime_error:
                pass
            

        cycletime=time.time() - last_cycle
        time.sleep(sample_period-cycletime)
        last_cycle = time.time()
        current_period += sample_period
        
        if current_period >= log_period:
            current_period = 0
            data = {
                "type": "measurement",
                "cpu_temp": cpu_temp/1000.0,
                "readings": sensor_data,
                "units": "mmH2O, °C",
                # "hostname": HOSTNAME,
                "timestamp": time.time(),
                "gm_time": time.asctime(time.gmtime())
            }

            new_id = col_test.insert_one(data)
            log.info(f"New log pushed: {new_id}")
            log.debug(f"Data: {data}")


if __name__ == "__main__":
    
    print("creating logger")
    
    logging.basicConfig(
        format='%(asctime)s: %(name)s: %(levelname)s - %(message)s', 
        datefmt='%m/%d/%Y %I:%M:%S %p',
        filename='/tmp/xerxes.log', 
        level=logging._nameToLevel[settings.logging_level]
    )
    log = logging.getLogger(__name__)
    try:
        handler = logging.StreamHandler(stream=journal)
        log.addHandler(handler)
    except AttributeError:
        log.error("unable to open systemd journal")

    log.warning("Logger started")

    database = MongoClient(settings.mongo_URI)
    log.info("Database connected")

    log.info(f"Databases present: {database.alfa.list_collection_names()}")
    log.info(f"Current working dir: {os.getcwd()}")
  
    if settings.use_hw_flow:
        hw_flow_pin = X.GpioPin(settings.hw_flow_pin_nr)
        rs485 = X.RS485(settings.use_device, hw_flow_pin)
    else:
        rs485 = X.RS485(settings.use_device)
    comm = X.Protocol(rs485, 0x00)
    leaves = []

    adresses_discovered = discover(comm, leaves)
    log.warning("Discovered these leaves:")
    log.warning(adresses_discovered)

    run(database, sample_period=settings.sample_period, log_period=settings.update_period)
