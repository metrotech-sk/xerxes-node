#!/usr/bin/env python3
# -*- coding: utf-8 -*-


from rich import print
import os
import time
import socket
import logging
import sys
import serial
from pymongo import MongoClient
from pymongo.collection import Collection
from xerxes_protocol.network import XerxesNetwork, Addr
from xerxes_protocol.hierarchy.root import XerxesRoot
from xerxes_protocol.hierarchy.leaves.utils import leaf_generator
from xerxes_protocol.hierarchy.leaves.leaf import Leaf, LeafData
import xerxes_node.config as config
from xerxes_node.system import Duplex, XerxesSystem
from xerxes_node.utils import get_cpu_temp_celsius


file_path = os.path.realpath(__file__)
script_dir = os.path.dirname(file_path)

import os, time


HOSTNAME = socket.gethostname()

def home_dir(path):
    return os.path.join(os.path.expanduser("~"), path)


def run(collection: Collection, system: XerxesSystem, sample_period: float, log_period: float):

    current_period = log_period
    last_cycle = time.perf_counter()
    run_count = 0

    while True:
        while system.busy():
            pass
        system.poll()

        cycletime = time.perf_counter() - last_cycle
        try:
            time.sleep(sample_period-cycletime)
        except ValueError:
            log.warning(f"Cycle time {cycletime} is longer than sample period {sample_period}")

        current_period += sample_period
        last_cycle = time.perf_counter()
        
        if current_period >= log_period:
            current_period = 0
            
            data = dict()
            
            m = system.get_measurements()
            for leaf in m.keys():
                ma = Leaf.average(m.get(leaf))
                md = ma._as_dict()
                data.update({
                    "measurements": {
                        str(int(leaf.address)): md
                    },           
                    "time":{
                        "epoch": time.time(),
                        "gm_time": time.asctime(time.gmtime()),
                    }   
                })


            new_id = collection.insert_one(data)
            log.info(f"New log pushed: {new_id.inserted_id}")
            log.debug(f"Data: {data}")
                
            # every once in a while, rescan the network
            if run_count % 100 == 0:
                discover_result = system.discover()

                data = {
                    "discovery": discover_result,
                    "system_info": {
                        "cpu_temp": get_cpu_temp_celsius()
                    }  
                }
                new_id = collection.insert_one(data)
                log.info(f"New log pushed: {new_id.inserted_id}")
                log.debug(f"Data: {data}")

            run_count += 1


if __name__ == "__main__":
    
    print("creating logger")
    log_filename = "/tmp/xerxes.log"
    
    log = logging.getLogger()
    logging.basicConfig(
        format='%(asctime)s: %(name)s: %(levelname)s - %(message)s', 
        datefmt='%m/%d/%Y %I:%M:%S %p',
        filename=log_filename, 
        level=logging._nameToLevel[config.logging_level]
    )
    
    try:
        import systemd.journal as journal
        log.addHandler(journal.JournalHandler())    
        gettrace = getattr(sys, 'gettrace', None)

        if gettrace is None:
            print('No sys.gettrace')
        elif gettrace():
            # debugging, attach to stdout too 
            handler = logging.StreamHandler(sys.stdout)
            handler.setLevel(logging._nameToLevel[config.logging_level])
            log.addHandler(handler)
    except (AttributeError, ModuleNotFoundError):
        log.error("unable to open systemd journal, using stdout")
        
        handler = logging.StreamHandler(sys.stdout)
        handler.setLevel(logging._nameToLevel[config.logging_level])
        log.addHandler(handler)

    log.info(f"Logger started, log file: {log_filename}")
    
    XN = XerxesNetwork(serial.Serial(
        port=config.use_device,
        baudrate=115200,
        timeout=config.port_timeout
        )).init()
    XR = XerxesRoot(Addr(0), XN)

    leaves = []
    for i in range(0xFF):
        tl = Leaf(Addr(i), XR)
        try:
            dl = leaf_generator(tl)
            leaves.append(dl)
        except TimeoutError:
            pass
    log.warning(f"{len(leaves)} leaves were found on network.")
    log.info(leaves)

    XS = XerxesSystem(
        leaves=leaves,
        mode=Duplex.HALF,
        root=XR,
        std_timeout_s=config.network_timeout,
    )

    shard = MongoClient(config.mongo_URI)
    database = shard.get_database(config.use_database)
    collection = database[HOSTNAME]
    log.info(f"Database {database.name} connected")

    log.info(f"Using collection: {database.name}.{HOSTNAME}")
    log.debug(f"Current working dir: {os.getcwd()}")
  

    run(
        collection=collection,
        system=XS,
        sample_period=config.sample_period, 
        log_period=config.update_period
    )

