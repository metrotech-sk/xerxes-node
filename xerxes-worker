#!/usr/bin/env python3
# -*- coding: utf-8 -*-


from pprint import pprint as print
import os
import time
import socket
import logging
import sys
from pymongo import MongoClient
from pymongo.collection import Collection
from systemd import journal
from xerxes_node.network import XerxesNetwork
import xerxes_node.config as config
from xerxes_node.system import Duplex, XerxesSystem
from xerxes_node.utils import get_cpu_temp_celsius


file_path = os.path.realpath(__file__)
script_dir = os.path.dirname(file_path)

import os, time


HOSTNAME = socket.gethostname()

def home_dir(path):
    return os.path.join(os.path.expanduser("~"), path)


def run(collection: Collection, system: XerxesSystem, sample_period: float, log_period: float):

    current_period = log_period
    last_cycle = time.perf_counter()

    while True:
        while system.busy():
            pass
        system.poll()

        cycletime = time.perf_counter() - last_cycle
        try:
            time.sleep(sample_period-cycletime)
        except ValueError:
            log.warning(f"Cycle time {cycletime} is longer than sample period {sample_period}")

        current_period += sample_period
        last_cycle = time.perf_counter()
        
        if current_period >= log_period:
            current_period = 0
            
            data = dict()
            
            for branch in system.branches:
                try:
                    data[branch.name] = branch.to_dict()
                except NotImplementedError:
                    log.error("Branch is not implemented")
                except KeyError as e:
                    log.error(f"Accessing unawailable node. Details: {e}")

            data.update(
                {
                    "system_info": {
                        "cpu_temp": get_cpu_temp_celsius()
                    },           
                    "time":{
                        "epoch": time.time(),
                        "gm_time": time.asctime(time.gmtime()),
                    }     
                }
            )

            new_id = collection.insert_one(data)
            log.info(f"New log pushed: {new_id.inserted_id}")
            log.debug(f"Data: {data}")


if __name__ == "__main__":
    
    print("creating logger")
    log_filename = "/tmp/xerxes.log"
    
    log = logging.getLogger()
    logging.basicConfig(
        format='%(asctime)s: %(name)s: %(levelname)s - %(message)s', 
        datefmt='%m/%d/%Y %I:%M:%S %p',
        filename=log_filename, 
        level=logging._nameToLevel[config.logging_level]
    )
    
    try:
        log.addHandler(journal.JournalHandler())
    except AttributeError:
        log.error("unable to open systemd journal, using stdout")
        
    handler = logging.StreamHandler(sys.stdout)
    handler.setLevel(logging.DEBUG)
    log.addHandler(handler)

    log.info(f"Logger started, log file: {log_filename}")
    
    XN = XerxesNetwork(
        port = config.use_device
    ).init(
        baudrate=115_200,
        timeout=config.port_timeout,
        my_addr=0x00
    )

    # for each sensor, use communicaiton channel XN
    for branch in config.branches:
        for leaf in branch.leaves:
            leaf.assign_channel(XN)

    XS = XerxesSystem(
        branches=config.branches,
        mode=Duplex.HALF,
        std_timeout_s=config.network_timeout
    )

    shard = MongoClient(config.mongo_URI)
    database = shard.get_database(config.use_database)
    collection = database[HOSTNAME]
    log.info(f"Database {database.name} connected")

    log.info(f"Using collection: {database.name}.{HOSTNAME}")
    log.debug(f"Current working dir: {os.getcwd()}")
  

    run(
        collection=collection,
        system=XS,
        sample_period=config.sample_period, 
        log_period=config.update_period
    )

