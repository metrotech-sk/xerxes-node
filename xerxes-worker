#!/usr/bin/env python3
# -*- coding: utf-8 -*-


from pprint import pprint as print
import os
import time
import socket
import logging
import sys
from pymongo import MongoClient
from pymongo.collection import Collection
from systemd import journal
from xerxes_node.hierarchy.leaves.pleaf import PLeaf
from xerxes_node.hierarchy.leaves.pleaf import Medium
from xerxes_node.network import Addr, XerxesNetwork
import xerxes_node.config as config
from xerxes_node.parser import NivelationParser, Parser
from xerxes_node.system import XerxesSystem
from xerxes_node.utils import get_cpu_temp_celsius


file_path = os.path.realpath(__file__)
script_dir = os.path.dirname(file_path)

import os, time


HOSTNAME = socket.gethostname()

def home_dir(path):
    return os.path.join(os.path.expanduser("~"), path)



def run(collection: Collection, network: XerxesNetwork, sample_period: int, log_period: int):

    current_period = log_period
    last_cycle = time.time()

    network = XerxesSystem(leaves, std_timeout_s=0.2)

    while True:
        # wait until network is ready
        network.wait()

        # poll for data from sensors
        network.poll()

        # calculate cycletime and delays
        cycletime = time.time() - last_cycle
        if sample_period-cycletime > 0:
            time.sleep(sample_period-cycletime)
        else:
            log.warning(f"Cycle time: {cycletime}, is longer than desired sample period: {sample_period}.")

        last_cycle = time.time()
        current_period += sample_period
        
        if current_period >= log_period:
            current_period = 0
            
            data = dict()
            network.wait()

            for branch in network.branches:
                data[branch.name] = NivelationParser.to_dict(
                    averages=branch.read(),
                    reference_value=branch.column_height
                )

            data.update(
                {
                    "info": {
                        "units": "mm, °C",
                        "cpu_temp": get_cpu_temp_celsius()
                    },           
                    "time":{
                        "epoch": time.time(),
                        "gm_time": time.asctime(time.gmtime()),
                    }     
                }
            )

            new_id = collection.insert_one(data)
            log.info(f"New log pushed: {new_id.inserted_id}")
            log.debug(f"Data: {data}")


if __name__ == "__main__":
    
    print("creating logger")
    log_filename = "/tmp/xerxes.log"
    
    logging.basicConfig(
        format='%(asctime)s: %(name)s: %(levelname)s - %(message)s', 
        datefmt='%m/%d/%Y %I:%M:%S %p',
        filename=log_filename, 
        level=logging._nameToLevel[config.logging_level]
    )
    log = logging.getLogger(__name__)
    
    try:
        log.addHandler(journal.JournalHandler())
    except AttributeError:
        log.error("unable to open systemd journal, using stdout")
        
        handler = logging.StreamHandler(sys.stdout)
        handler.setLevel(logging.DEBUG)
        log.addHandler(handler)

    log.info(f"Logger started, log file: {log_filename}")
    
    XN = XerxesNetwork(
        port = config.use_device,
        baudrate=115_200,
        timeout=config.sensor_timeout,
        my_addr=0x00
    )
    
    # load sensor list from config
    leaves = []
    for key in config.leaves.keys():
        if config.leaves.get(key) == "nivelation":
            leaves.append(
                PLeaf(
                    channel=XN,
                    addr=Addr(key),
                    medium=config.used_medium
                )
            )

    shard = MongoClient(config.mongo_URI)
    database = shard.get_database(config.use_database)
    collection = database[HOSTNAME]
    log.info(f"Database {database.name} connected")

    log.info(f"Using collection: {database.name}.{HOSTNAME}")
    log.debug(f"Current working dir: {os.getcwd()}")
  

    run(
        collection=collection,
        network=x_network,
        sample_period=config.sample_period, 
        log_period=config.update_period
    )

